_ = require 'underscore'
Backbone = require 'backbone'

Backbone.Model.extend = Backbone.Collection.extend = Backbone.Router.extend = Backbone.View.extend =
Backbone.History.extend = (protoProps, classProps) ->
    inherits this, protoProps, classProps

isSuperMayBeCorrectlyDetected = false
fnTest = /\b_super\b/
if /xyz/.test((->
    'xyz'
))
    isSuperMayBeCorrectlyDetected = true

makeWrapper = (_super, name, fn) ->

    wrapper = ->
        tmp = @_super
        # Add a new ._super() method that is the same method
        # but on the super-class
        @_super = _super[name]
        # The method only need to be bound temporarily, so we
        # remove it when we're done executing
        ret = fn.apply(this, arguments)
        @_super = tmp
        ret

    for key of fn
        if fn.hasOwnProperty(key)
            wrapper[key] = fn[key]
            delete fn[key]
    wrapper

Surrogate = ->

inherits = (parent, protoProps, staticProps) ->
    child = undefined
    _super = parent.prototype
    # The constructor function for the new subclass is either defined by you
    # (the "constructor" property in your `extend` definition), or defaulted
    # by us to simply call the parent's constructor.
    if protoProps and protoProps.hasOwnProperty('constructor')
        child = protoProps.constructor
    else

        child = ->
            parent.apply this, arguments
            return

    # Inherit class (static) properties from parent.
    _.extend child, parent
    # Set the prototype chain to inherit from `parent`, without calling
    # `parent`'s constructor function.
    Surrogate.prototype = parent.prototype
    child.prototype = new Surrogate
    # Add prototype properties (instance properties) to the subclass,
    # if supplied.
    if protoProps
        _.extend child.prototype, protoProps
        # Copy the properties over onto the new prototype
        for name of protoProps
            if !protoProps.hasOwnProperty(name)
                continue
            prop = protoProps[name]
            if typeof prop != 'function' or isSuperMayBeCorrectlyDetected and !fnTest.test(prop)
                continue
            # Check if we're overwriting an existing function
            if typeof _super[name] == 'function'
                child.prototype[name] = makeWrapper(_super, name, prop)
            else if isSuperMayBeCorrectlyDetected
                if console and console.trace
                    console.trace()
                throw new Error('super method is not defined for ' + name)
    # Add static properties to the constructor function, if supplied.
    if staticProps
        _.extend child, staticProps
    # Correctly set child's `prototype.constructor`.
    child::constructor = child
    # Set a convenience property in case the parent's prototype is needed later.
    child.__super__ = parent.prototype
    child

# ---
# generated by js2coffee 2.1.0

module.exports = Backbone
